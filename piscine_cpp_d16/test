#include	"Parser.h"

//Parser---------------------------
Parser::Parser() {
  _result = 0; }

Parser::Parser(const Parser& old) {
  operands = old.operands;
  operators = old.operators;
  _result = old._result;
}

Parser::~Parser() {}

//Funcs----------------------------
int		is_ope(char c) {
  return (c == '*' || c == '+' || c == '-' || c == '/' || c == '%'); }

int		calculate(long int num, long int nb, char op) {
  if (op == '+')
     return num + nb;
  if (op == '-')
    return num - nb;
  if (op == '*')
    return num * nb;
  if (op == '/')
    return num / nb;
  if (op == '%')
    return num % nb;
  return 0;
}

void		Parser::feed(const std::string & str) {
  long int	i = 0;
  long int	nb;
  int		res = 0;

  while (str[i]) {
    if (is_ope(str[i]))
      operators.push(str[i]);
    else if (isdigit(str[i]) && !isdigit(str[i - 1])) {
      nb = atoi(str.substr(i, str.npos).c_str());
      operands.push(nb);
    }
    i++;
  }
  std::stack<char> saveop;
  while (!operators.empty()) {
    saveop.push(operators.top());
    operators.pop();
  }
  std::stack<long int> save;
  while (!operands.empty()) {
    save.push(operands.top());
    operands.pop();
  }
  res = save.top();
  save.pop();
  while (!saveop.empty()) {
    res = calculate(res, save.top(), saveop.top());
    save.pop();
    saveop.pop();
  }
  _result += res;
}

int		Parser::result() const {
  return _result; }

void		Parser::reset() {
  _result = 0;
  while (!operators.empty())
    operators.pop();
  while (!operands.empty())
    operands.pop();
}
#ifndef		PARSER_H_
#define		PARSER_H_

#include	<stack>
#include	<iostream>
#include	<string>
#include	<cstdlib>

class	Parser {
 protected:
  std::stack<long int>	operands;
  std::stack<char>	operators;
  int			_result;
 
 public:
  Parser();
  Parser(const Parser&);
  ~Parser();

  void		feed(const std::string &);
  int		result() const;
  void		reset();
};

#endif
#include "DomesticKoala.h"


// Constructor / Destructor
DomesticKoala::DomesticKoala() : _methods(), _orders(), _ka(NULL) { }

DomesticKoala::DomesticKoala(const DomesticKoala &ref) : _methods(ref._methods), _orders(ref._orders), _ka(ref._ka)
{ }

DomesticKoala::DomesticKoala(KoalaAction &ka) : _methods(), _orders(), _ka(&ka) { }

DomesticKoala::~DomesticKoala() { }

// Utilities
std::vector<DomesticKoala::methodPointer_t> const * DomesticKoala::getActions() const {
  return &this->_methods; }

void DomesticKoala::learnAction(unsigned char order, DomesticKoala::methodPointer_t method) {
  unlearnAction(order);
  this->_methods.push_back(method);
  this->_orders.push_back(order);
}

void DomesticKoala::unlearnAction(unsigned char order) {
  int index = 0;
  for (std::vector<unsigned char>::iterator iter = this->_orders.begin(); iter != this->_orders.end(); iter++)
    {
      if ((*iter) == order)
	{
	  this->_orders.erase(iter);
	  break;
	}
      index++;
    }
  for (std::vector<DomesticKoala::methodPointer_t>::iterator iter = this->_methods.begin(); iter != this->_methods.end(); iter++)
    {
      if (index-- == 0)
	{
	  this->_methods.erase(iter);
	  break;
	}
    }
}

void DomesticKoala::doAction(unsigned char order, const std::string &msg) {
  if (this->_ka == NULL)
    return;
  int index = 0;
  for (std::vector<unsigned char>::iterator iter = this->_orders.begin(); iter != this->_orders.end(); iter++)
    {
      if ((*iter) == order)
	break;
      index++;
    }
  for (std::vector<DomesticKoala::methodPointer_t>::iterator iter = this->_methods.begin(); iter != this->_methods.end(); iter++)
    {
      if (index-- == 0)
	{
	  (this->_ka->*(*iter))(msg);
	  break;
	}
    }
}

void DomesticKoala::setKoalaAction(KoalaAction &ka) {
  this->_ka = &ka;
  this->_methods.clear();
  this->_orders.clear();
}

// Operators
DomesticKoala &DomesticKoala::operator=(const DomesticKoala &other){
  this->_ka = other._ka;
  this->_orders = other._orders;
  this->_methods = other._methods;
  return *this;
}
#ifndef		DOMESTICKOALA_H_
#define		DOMESTICKOALA_H_

#include	<vector>
#include	"KoalaAction.h"

class DomesticKoala {
 public:
  DomesticKoala();
  DomesticKoala(const DomesticKoala &);
  DomesticKoala(KoalaAction &);
  ~DomesticKoala();
  typedef void (KoalaAction::*methodPointer_t)(const std::string &);

 public:
  std::vector<methodPointer_t> const *	getActions() const;
  void					learnAction(unsigned char, methodPointer_t);
  void					unlearnAction(unsigned char);
  void					doAction(unsigned char, const std::string &);
  void					setKoalaAction(KoalaAction &);
		
 public:
  DomesticKoala				&operator=(const DomesticKoala &);

 private:
  std::vector<methodPointer_t>		_methods;
  std::vector<unsigned char>		_orders;
  KoalaAction				*_ka;
};

#endif
#include "Event.h"

//Constructor----------------------------------------
Event::Event() : _time(0), _event() { }

Event::Event(const Event &ref) : _time(ref._time), _event(ref._event) { }

Event::Event(unsigned int time, const std::string &event) : _time(time), _event(event) { }

Event::~Event() { }

//Getters--------------------------------------------
unsigned int	Event::getTime() const {
  return _time; }

const std::string& Event::getEvent() const {
  return _event; }

void		Event::setTime(unsigned int time) {
  _time = time; }

void		Event::setEvent(const std::string &event) {
  _event = event; }

//Operators-----------------------------------------
Event&		Event::operator=(const Event &other) {
  _time = other._time;
  _event = other._event;
  return *this;
}

bool		Event::operator<(const Event &other) {
  return (_time < other._time); }

bool		Event::operator>(const Event &other) {
  return (_time > other._time); }

bool		Event::operator==(const Event &other) {
  return (_time == other._time); }

bool		Event::operator<(unsigned int t) {
  return (_time < t); }

bool Event::operator>(unsigned int t) {
  return (_time > t); }

bool Event::operator==(unsigned int t) {
  return (_time == t); }
#ifndef		EVENT_H_
#define		EVENT_H_

#include	<string>

class Event {
 public:
  Event();
  Event(const Event &);
  Event(unsigned int, const std::string &);
  ~Event();
  
 public:
  unsigned int		getTime() const;
  const std::string&	getEvent() const;
  void			setTime(unsigned int);
  void			setEvent(const std::string &);

 public:
  Event&	operator=(const Event &);
  bool		operator<(const Event &);
  bool		operator>(const Event &);
  bool		operator==(const Event &);
  bool		operator<(unsigned int);
  bool		operator>(unsigned int);
  bool		operator==(unsigned int);

 private:
  unsigned int	_time;
  std::string	_event;
};

#endif
#include <iostream>
#include "EventManager.h"

//-----------------------------------------------------------
// Constructor / Destructor
//-----------------------------------------------------------
EventManager::EventManager()
  : _currentTime(0), _eventsList()
{
}

EventManager::EventManager(const EventManager &ref)
  : _currentTime(ref._currentTime),
    _eventsList(ref._eventsList)
{
}

EventManager::~EventManager()
{
}

//-----------------------------------------------------------
// Utilities
//-----------------------------------------------------------
void EventManager::addEvent(const Event &e)
{
  if (e.getTime() <= this->_currentTime)
    return;
  std::list<Event>::iterator iter;
  for (iter = this->_eventsList.begin(); iter != this->_eventsList.end(); iter++)
    {
      if ((*iter).getTime() > e.getTime())
	{
	  this->_eventsList.insert(iter, 1, e);
	  return;
	}
    }
  this->_eventsList.push_back(e);
}

void EventManager::removeEventsAt(unsigned int t)
{
  std::list<Event>::const_iterator iter;
  for (iter = this->_eventsList.begin(); iter != this->_eventsList.end(); iter++)
    if ((*iter).getTime() == t)
      this->_eventsList.remove(*iter);
}

void EventManager::dumpEvents() const
{
  std::list<Event>::const_iterator iter;
  for (iter = this->_eventsList.begin(); iter != this->_eventsList.end(); iter++)
    std::cout << (*iter).getTime() << ": " << (*iter).getEvent() << std::endl;
}

void EventManager::dumpEventAt(unsigned int t) const
{
  std::list<Event>::const_iterator iter;
  for (iter = this->_eventsList.begin(); iter != this->_eventsList.end(); iter++)
    if ((*iter).getTime() == t)
      std::cout << (*iter).getTime() << ": " << (*iter).getEvent() << std::endl;
}

void EventManager::addTime(unsigned int t)
{
  this->_currentTime += t;

  std::list<Event>::const_iterator iter;
  for (iter = this->_eventsList.begin(); iter != this->_eventsList.end(); iter++)
    {
      if ((*iter).getTime() <= this->_currentTime)
	{
	  std::cout << (*iter).getEvent() << std::endl;
	  this->_eventsList.remove(*iter);
	}
    }
}

void EventManager::addEventList(std::list<Event> &l)
{
  std::list<Event>::iterator iter;
  for (iter = l.begin(); iter != l.end(); iter++)
    addEvent(*iter);
}

//-----------------------------------------------------------
// Operators
//-----------------------------------------------------------
EventManager &EventManager::operator=(const EventManager &other)
{
  this->_currentTime = other._currentTime;
  this->_eventsList = other._eventsList;
  return *this;
}
#ifndef		EVENTMANAGER_H_
#define		EVENTMANAGER_H_

#include	<list>
#include	"Event.h"

class	EventManager {
 public:
  EventManager();
  EventManager(const EventManager &);
  ~EventManager();

 public:
  void		addEvent(const Event &);
  void		removeEventsAt(unsigned int);
  void		dumpEvents() const;
  void		dumpEventAt(unsigned int) const;
  void		addTime(unsigned int);
  void		addEventList(std::list<Event> &);

 public:
  EventManager&	operator=(const EventManager &);

 private:
  unsigned int		_currentTime;
  std::list<Event>	_eventsList;
};

#endif
#include <cstdlib>
#include <iostream>
#include "EventManager.h"

int main(int argc, char **argv)
{
  EventManager *em = new EventManager();

  em->addEvent(Event(10, "Eat"));
  em->addEvent(Event(12, "Finish the exercises"));
  em->addEvent(Event(12, "Understand the thing"));
  em->addEvent(Event(15, "Set the rights"));
  em->addEvent(Event(8, "Ask what the hell a const_iterator is"));
  em->addEvent(Event(11, "Wash my hands so that my keyboard doesn’t smell like kebab"));
  em->dumpEvents();
  std::cout << "=====" << std::endl;

  // Following a massive rotten leaves of eucalyptus ingestion,
  // all the exercises of the day are canceled.
  //  em->removeEventsAt(12);
  em->dumpEvents();
  std::cout << "=====" << std::endl;

  // Hey, the time is flying!
  em->addTime(10);
  std::cout << "=====" << std::endl;

  em->dumpEvents();
  std::cout << "=====" << std::endl;

  // Following the aforementioned ingestion and to help you improve your skill level
  // an exercises serie will be added.
 std::list<Event> todo;
 todo.push_front(Event(19, "The vengeance of the Koala"));
 todo.push_front(Event(20, "The return of the vengeance of the Koala"));
 todo.push_front(Event(21, "The come back of the return of the vengeance of the Koala"));
 todo.push_front(Event(22, "The sequel to the come back of the return of ...well, you get the drift."));
 todo.push_front(Event(9, "What the hell do you mean 'It's due this morning' ?!"));
 todo.push_front(Event(1, "No, no, you’re pushing it now..."));

 em->addEventList(todo);
 em->dumpEvents();
 std::cout << "=====" << std::endl;
 
 // I forgot something, but what??
 em->dumpEventAt(15);
 std::cout << "=====" << std::endl;
 
 // And we finish the day with joy and good humour.
 em->addTime(14);

 return 0;
}
#include	"BF_Translator.h"

BF_Translator::BF_Translator() {
  commands['+'] = &BF_Translator::command_inc;
  commands['-'] = &BF_Translator::command_desc;
  commands['>'] = &BF_Translator::command_next;
  commands['<'] = &BF_Translator::command_prev;
  commands['.'] = &BF_Translator::command_write;
  commands[','] = &BF_Translator::command_read;
  commands['['] = &BF_Translator::command_jump;
  commands[']'] = &BF_Translator::command_back;
}

BF_Translator::~BF_Translator() { }

int BF_Translator::translate(std::string in, std::string out) {
  try {
    this->in.open(in.data(), std::ios::in);
    this->out.open(out.data(), std::ios::trunc | std::ios::out);
    if (!this->in.is_open() || !this->out.is_open())
      throw std::exception();
    bf_command	command;
    header();
    while (!this->in.eof()) {
      char c = this->in.get();
      command = commands[c];
      if (command)
	(this->*command)();
      else if (!isspace(c) && c != -1)
	throw std::exception();
    }
    footer();
    this->out.flush();
    this->in.close();
    this->out.close();
  }
  catch (std::exception & e) {
    this->in.close();
    this->out.close();
    return -1;
  }
  return 0;
}

void BF_Translator::header() {
  out << "#include <stdlib.h>\n"
      << "#include <string.h>"
      << "\n"
      << "#define MEMORY_MAX 60*1024\n"
      << "\n"
      << "int main() {\n"
      << " char memory[MEMORY_MAX];\n"
      << " unsigned int cursor = 0;\n"
      << "memset(memory, 0, MEMORY_MAX);\n"
      << "\n";
}

void BF_Translator::footer() {
  out << "}\n"; }

void BF_Translator::command_inc() {
  out << "memory[cursor]++;\n"; }

void BF_Translator::command_desc() {
  out << "memory[cursor]--;\n"; }

void BF_Translator::command_next() {
  out << "cursor++;\n"; }

void BF_Translator::command_prev() {
  out << "cursor--;\n"; }

void BF_Translator::command_write() {
  out << "write(1, &memory[cursor], 1);\n"; }

void BF_Translator::command_read() {
  out << "read(0, &memory[cursor], 1);\n"; }

void BF_Translator::command_jump() {
  out << "while (memory[cursor]) {\n"; }

void BF_Translator::command_back() {
  out << "}\n"; }
#ifndef		BF_TRANSLATOR_H_
#define		BF_TRANSLATOR_H_

#include	<string>
#include	<iostream>
#include	<map>
#include	<fstream>
#include	<exception>

class	BF_Translator {
  typedef void (BF_Translator::*bf_command)();
 protected:
  std::fstream		in;
  std::fstream		out;
  std::map<char, bf_command>	commands;
  
 public:
  BF_Translator();
  virtual ~BF_Translator();

  int		translate(std::string in, std::string out);
protected:
  void		header();
  void		footer();
  void		command_inc();
  void		command_desc();
  void		command_next();
  void		command_prev();
  void		command_write();
  void		command_read();
  void		command_jump();
  void		command_back();
};

#endif
#include	"Ratatouille.h"


//Constructors---------------------------------------------
Ratatouille::Ratatouille() { }

Ratatouille::Ratatouille(const Ratatouille& source) {
  flux = source.flux; 
}

Ratatouille::~Ratatouille() { }


Ratatouille&	Ratatouille::operator=(const Ratatouille& source) {
  flux = source.flux;
  return *this;
}

//AddFunctions---------------------------------------------
Ratatouille&	Ratatouille::addVegetable(unsigned char vegetable) {
  std::stringstream	s;
  s << flux << vegetable;
  flux = s.str();
  return *this;
}

Ratatouille&	Ratatouille::addCondiment(unsigned int condiment) {
  std::stringstream	s;
  s << flux << condiment;
  flux = s.str();
  return *this;
}

Ratatouille&	Ratatouille::addSpice(double spice) {
  std::stringstream	s;
  s << flux << spice;
  flux = s.str();
  return *this;
}

Ratatouille&	Ratatouille::addSauce(std::string const& sauce) {
  std::stringstream	s;
  s << flux << sauce;
  flux = s.str();
  return *this;
}

std::string	Ratatouille::kooc() {
  return flux; }
#ifndef		RATATOUILLE_H_
#define		RATATOUILLE_H_

#include	<string>
#include	<sstream>
#include	<iostream>

class	Ratatouille {
 protected:
  std::string		flux;

 public:
  Ratatouille();
  Ratatouille(const Ratatouille&);
  virtual ~Ratatouille();
  Ratatouille&		operator=(const Ratatouille&);

  Ratatouille&		addVegetable(unsigned char);
  Ratatouille&		addCondiment(unsigned int);
  Ratatouille&		addSpice(double);
  Ratatouille&		addSauce(const std::string &);

  std::string kooc();
};

#endif
